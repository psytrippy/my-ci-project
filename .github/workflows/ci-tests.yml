# Имя нашего рабочего процесса, которое будет видно в интерфейсе GitHub Actions.
name: Автоматические тесты проекта

# Секция 'on' определяет, когда этот рабочий процесс будет запускаться.
on:
  push:
    branches:
      - main # Запускать Workflow при каждом push (загрузке кода) в ветку 'main'.
  pull_request:
    branches:
      - main # Также запускать Workflow при создании или обновлении pull request в ветку 'main'.

# Секция 'jobs' определяет одно или несколько заданий, которые будут выполняться.
jobs:
  build-and-test: # Имя нашего единственного задания.
    # 'runs-on' указывает, на каком типе операционной системы будет выполняться это задание.
    # 'ubuntu-latest' означает, что GitHub предоставит нам виртуальную машину с последней версией Ubuntu.
    # Это не зависит от твоей ОС Windows, так как выполняется на серверах GitHub.
    runs-on: ubuntu-latest

    # 'steps' - это список отдельных шагов, которые будут выполняться внутри этого задания, по порядку.
    steps:
      # Шаг 1: Клонирование кода из репозитория на раннер (виртуальную машину).
      # 'uses: actions/checkout@v4' - это стандартное готовое действие GitHub,
      # которое берет твой код из репозитория.
      - name: Клонирование репозитория
        uses: actions/checkout@v4

      # Шаг 2: Установка Node.js на раннер.
      # 'uses: actions/setup-node@v4' - это готовое действие для настройки окружения Node.js.
      - name: Установка Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Указываем, какую версию Node.js нам нужно установить на раннере.

      # Шаг 3: Установка зависимостей проекта (из package.json) на раннере.
      # 'run' означает, что мы просто выполняем обычную команду командной строки.
      - name: Установка зависимостей
        run: npm install

      # Шаг 4: Запуск тестов проекта на раннере.
      # Используем команду, которую мы прописали в package.json.
      - name: Запуск автоматических тестов
        run: npm test
